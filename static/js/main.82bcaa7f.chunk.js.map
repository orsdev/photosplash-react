{"version":3,"sources":["components/Layout/Layout.js","UI/Button/Button.js","components/InputField/InputField.js","UI/Spinner/Spinner.js","components/Gallery/Gallery.js","axiosInstance/axiosInstance.js","UI/Modal/Modal.js","store/actions/action.js","store/actions/actionTypes.js","UI/Backdrop/Backdrop.js","UI/Popup/Popup.js","container/PhotoGallery/PhotoGallery.js","App.js","store/reducer/reducer.js","serviceWorker.js","index.js"],"names":["Layout","props","react_default","a","createElement","className","children","Button","react","onClick","clicked","classe","name","inputField","onKeyUp","keyCodeSearch","id","type","placeholder","buttonSearch","UI_Button_Button","search","Spinner","connect","state","searchTimer","images","unsplashImages","image","map","img","index","key","concat","src","urls","regular","alt","getsrc","axiosInstance","axios","create","baseURL","error","dispatch","onERRORNULL","memo","message","backdrop","popup","close","PhotoSplash","per_page","currentPage","showPopup","popupImage","GetData","val","_this$state","_this","url","onMakeRequest","ButtonSearch","document","getElementById","value","predifinedSearch","event","textContent","target","KeyCodeSearch","keyCode","backButton","setState","prevState","nextButton","imagePopup","closePopup","prevProps","this","result","navButton","classProp","spinnerTimer","UI_Spinner_Spinner","components_Gallery_Gallery","Fragment","UI_Backdrop_Backdrop","UI_Modal_Modal","InputField","components_Layout_Layout","Popup","Component","get","then","res","data","results","catch","failedRequest","actions","App","PhotoGallery","React","initialState","reducer","arguments","length","undefined","action","Object","objectSpread2","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","Reducer","applyMiddleware","thunk","app","es","src_App","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82bcaa7f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Layout = (props) => {\r\n\r\n  return (\r\n    <div className='layoutContainer'>\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Layout;","import React, { Fragment } from 'react';\r\n\r\nconst Button = (props) => {\r\n return (\r\n  <Fragment>\r\n   <button\r\n    onClick={props.clicked}\r\n    className={props.classe}>\r\n    {props.name}\r\n   </button>\r\n  </Fragment>\r\n\r\n );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst inputField = (props) => {\r\n  return (\r\n    <div className='form-container'>\r\n      <div className='form-group'>\r\n        <input onKeyUp={props.keyCodeSearch} id='search' type='search' placeholder='Search Here...' />\r\n        <button onClick={props.buttonSearch} className='search'><i className='fa fa-search'></i></button>\r\n      </div>\r\n      <div className='btn-group'>\r\n        <Button clicked={props.search} classe='btn btn-outline-danger' name='MEN' />\r\n        <Button clicked={props.search} classe='btn btn-outline-warning' name='WOMEN' />\r\n        <Button clicked={props.search} classe='btn btn-outline-dark' name='NATURE' />\r\n        <Button clicked={props.search} classe='btn btn-outline-secondary' name='TECHNOLOGY' />\r\n        <Button clicked={props.search} classe='btn btn-outline-primary' name='CHILDREN' />\r\n        <Button clicked={props.search} classe='btn btn-outline-success' name='ANIMALS' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default inputField;","import React from 'react'\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className='spinner_container'>\r\n      <div className='lds-roller'>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst Gallery = props => {\r\n //variable will be re-assign to hold a value\r\n let image = null;\r\n\r\n //when search property is not empty, return map values\r\n if (props.searchTimer) {\r\n  //assign new value to images and return new element\r\n  image = props.images.map((img, index) => {\r\n   return (\r\n    <div key={img.id} className={`gallery__item--${index}`}>\r\n     <img src={img.urls.regular} alt={img.alt} onClick={props.getsrc} />\r\n    </div>\r\n   );\r\n  });\r\n }\r\n\r\n return image;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n return {\r\n  searchTimer: state.searchTimer,\r\n  images: state.unsplashImages\r\n }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, null)(Gallery);\r\n","import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'https://api.unsplash.com/search/photos'\r\n});\r\n\r\nexport default axiosInstance;","import React, { memo } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/action';\r\n\r\n\r\n/* \r\nModal is only shown when theres when there \r\nis an httpRequest error (props.error)\r\n*/\r\nconst Modal = props => {\r\n let message = null;\r\n\r\n if (props.error) {\r\n  message = (\r\n   <div className=\"modal-pop-dialog\" onClick={props.onERRORNULL}>\r\n    <div className=\"message\">\r\n     <p> {props.error} </p>\r\n     <button onClick={props.onERRORNULL} className=\"close-btn\">\r\n      x\r\n          </button>\r\n    </div>\r\n   </div>\r\n  );\r\n }\r\n return message;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n return {\r\n  error: state.error\r\n }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n return {\r\n  onERRORNULL: () => dispatch(actions.errorNull()),\r\n }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(Modal));\r\n","import * as actionTypes from '../actions/actionTypes';\r\nimport axios from '../../axiosInstance/axiosInstance';\r\n\r\nexport const setRequest = () => {\r\n return {\r\n  type: actionTypes.AJAX_REQUEST\r\n }\r\n}\r\n\r\nexport const successRequest = (images) => {\r\n return {\r\n  type: actionTypes.AJAX_SUCCESS,\r\n  images: images\r\n }\r\n}\r\n\r\nexport const failedRequest = (error) => {\r\n return {\r\n  type: actionTypes.AJAX_FAIL,\r\n  error: error\r\n }\r\n}\r\n\r\nexport const errorNull = () => {\r\n return {\r\n  type: actionTypes.ERRORNULL\r\n }\r\n}\r\n\r\nexport const makeRequest = (url) => {\r\n return dispatch => {\r\n\r\n  dispatch(setRequest());\r\n\r\n  // make httpRequest and save response\r\n  axios\r\n   .get(url)\r\n   .then(res => {\r\n\r\n    dispatch(successRequest(res.data.results));\r\n\r\n   })\r\n   .catch(error => {\r\n    dispatch(failedRequest(error.message))\r\n   });\r\n }\r\n}","export const AJAX_REQUEST = 'AJAX_REQUEST';\r\nexport const AJAX_FAIL = 'AJAX_FAIL';\r\nexport const AJAX_SUCCESS = 'AJAX_SUCCESS';\r\nexport const ERRORNULL = 'ERRORNULL';","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/action';\r\n\r\n/* \r\nBackdrop is only shown when theres when there \r\nis an httpRequest error (props.error) & when \r\nprops.popup is true\r\n*/\r\nconst Backdrop = props => {\r\n let backdrop = null;\r\n\r\n if (props.error || props.popup) {\r\n  backdrop = (\r\n   <div onClick={props.onERRORNULL} className=\"backdrop\" error={props.error}>\r\n    {props.children}\r\n   </div>\r\n  );\r\n }\r\n return backdrop;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n return {\r\n  error: state.error\r\n }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n return {\r\n  onERRORNULL: () => dispatch(actions.errorNull()),\r\n }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Backdrop);\r\n","import React from \"react\";\r\n\r\nconst popup = props => {\r\n  return (\r\n    <div className=\"popup\">\r\n      <span onClick={props.close} className=\"close-btn\">\r\n        X\r\n      </span>\r\n      <img src={props.src} alt=\"popup\" className=\"img-popup\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default popup;\r\n","import React, { Component } from \"react\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport InputField from \"../../components/InputField/InputField\";\r\nimport Spinner from \"../../UI/Spinner/Spinner\";\r\nimport Gallery from \"../../components/Gallery/Gallery\";\r\nimport Modal from \"../../UI/Modal/Modal\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport Backdrop from \"../../UI/Backdrop/Backdrop\";\r\nimport Popup from \"../../UI/Popup/Popup\";\r\nimport * as actions from '../../store/actions/action';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass PhotoSplash extends Component {\r\n state = {\r\n  per_page: 14,\r\n  currentPage: 1,\r\n  showPopup: false,\r\n  popupImage: null,\r\n };\r\n\r\n componentDidUpdate(prevProps, prevState) {\r\n  if (this.state.currentPage !== prevState.currentPage) {\r\n   //get element from dom\r\n   let val = document.getElementById(\"search\");\r\n   //make httpRequest\r\n   this.GetData(val.value);\r\n  }\r\n }\r\n\r\n GetData = val => {\r\n  //destruct\r\n  const { per_page, currentPage } = this.state;\r\n\r\n  let key =\r\n   \"95b50323e9088ff9cb2368e19fc9f970a5c08b945fbc3fbc55972e1180989fbc\";\r\n\r\n  //build up url\r\n  let url = `?query=${val}&page=${currentPage}&per_page=${per_page}&client_id=${key}`;\r\n\r\n  // make httpRequest\r\n  this.props.onMakeRequest(url);\r\n\r\n };\r\n\r\n ButtonSearch = () => {\r\n  //get element from dom\r\n  let val = document.getElementById(\"search\");\r\n\r\n  //call function (make httpRequest) if input field value is not empty\r\n  if (val.value) {\r\n   this.GetData(val.value);\r\n  }\r\n };\r\n\r\n predifinedSearch = event => {\r\n  //get element from dom\r\n  let val = document.getElementById(\"search\");\r\n\r\n  let target = event.target;\r\n\r\n  //variable holds targeted element textContent\r\n  let textContent = target.textContent;\r\n\r\n  //set input field value automatically\r\n  val.value = textContent;\r\n\r\n  //call function (make httpRequest) if textContent is  true ( not empty )\r\n  if (textContent) {\r\n   this.GetData(textContent);\r\n  }\r\n\r\n };\r\n\r\n KeyCodeSearch = event => {\r\n  //get element from dom\r\n  let val = document.getElementById(\"search\");\r\n\r\n  //listen to button keycode\r\n  let keyCode = event.keyCode;\r\n\r\n  /*\r\n  if keycode is an enter button, \r\n  and input field is not empty,\r\n  call function (make httpRequest)\r\n  */\r\n  if (keyCode === 13 && val.value) {\r\n   this.GetData(val.value);\r\n  }\r\n };\r\n\r\n\r\n backButton = () => {\r\n\r\n  //only decrement currentPage state when greater than 0\r\n  if (this.state.currentPage > 1) {\r\n\r\n   this.setState(function (prevState) {\r\n    return {\r\n     currentPage: prevState.currentPage - 1\r\n    }\r\n   })\r\n  }\r\n };\r\n\r\n nextButton = () => {\r\n\r\n  //only increment currentPage state when lesser than 10\r\n  if (this.state.currentPage > 0 && this.state.currentPage < 15) {\r\n\r\n   this.setState(function (prevState) {\r\n    return {\r\n     currentPage: prevState.currentPage + 1\r\n    }\r\n   })\r\n  }\r\n };\r\n\r\n imagePopup = event => {\r\n  //get selected dom element\r\n  let target = event.target;\r\n\r\n  //update state\r\n  this.setState({\r\n   popupImage: target.src,\r\n   showPopup: true\r\n  });\r\n\r\n };\r\n\r\n closePopup = () => {\r\n  //update state\r\n  this.setState({\r\n   popupImage: null,\r\n   showPopup: false\r\n  });\r\n };\r\n\r\n render() {\r\n  let navButton = null;\r\n  let result = null;\r\n  let images = null;\r\n\r\n  //assign className\r\n  let classProp = \"spinner_gallery\";\r\n\r\n  //when true, assign spinner component to images\r\n  if (this.props.spinnerTimer) {\r\n   images = <Spinner />;\r\n  }\r\n\r\n  //when search property is not empty, return map values\r\n  if (this.props.searchTimer) {\r\n   //assign new className\r\n   classProp = \"gallery\";\r\n\r\n   //assign new value to images\r\n   images = (\r\n    <Gallery\r\n     getsrc={this.imagePopup}\r\n    />\r\n   );\r\n\r\n   //asign navButton Button component\r\n   navButton = (\r\n    <div className=\"navContainer\">\r\n     <Button clicked={this.backButton} name=\"&lArr;\" />\r\n     <Button clicked={this.nextButton} name=\"&rArr;\" />\r\n    </div>\r\n   );\r\n\r\n  }\r\n  /*\r\n    assign result a new value, show backdrop if error exit\r\n    if error doesn't exit, show input field\r\n  */\r\n  result = (\r\n   <React.Fragment>\r\n    <Backdrop>\r\n     <Modal />\r\n    </Backdrop>\r\n\r\n    <InputField\r\n     keyCodeSearch={this.KeyCodeSearch}\r\n     buttonSearch={this.ButtonSearch}\r\n     search={this.predifinedSearch}\r\n    />\r\n    <div className=\"galleryContainer\">\r\n     <div className={classProp}>{images}</div>\r\n     {navButton}\r\n    </div>\r\n   </React.Fragment>\r\n  );\r\n\r\n  return (\r\n   <Layout>\r\n    <React.Fragment>\r\n     {this.state.showPopup ? (\r\n      <Backdrop popup={true}>\r\n       <Popup src={this.state.popupImage} close={this.closePopup} />\r\n      </Backdrop>\r\n     ) : (\r\n       result\r\n      )}\r\n    </React.Fragment>\r\n   </Layout>\r\n  );\r\n }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n return {\r\n  searchTimer: state.searchTimer,\r\n  spinnerTimer: state.spinnerTimer,\r\n  error: state.error,\r\n  unsplashImages: state.unsplashImages\r\n }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n return {\r\n  onMakeRequest: (url) => dispatch(actions.makeRequest(url)),\r\n  onERRORNULL: () => dispatch(actions.errorNull()),\r\n }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhotoSplash);\r\n","import React from 'react';\r\nimport PhotoGallery from './container/PhotoGallery/PhotoGallery';\r\nimport './css/style.css';\r\nimport './css/font-awesome.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <PhotoGallery />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as actionType from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n unsplashImages: null,\r\n error: null,\r\n searchTimer: false,\r\n spinnerTimer: false\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n switch (action.type) {\r\n  case actionType.AJAX_REQUEST:\r\n   return {\r\n    ...state,\r\n    error: null,\r\n    searchTimer: false,\r\n    spinnerTimer: true,\r\n    unsplashImages: null\r\n   }\r\n  case actionType.AJAX_SUCCESS:\r\n   return {\r\n    ...state,\r\n    unsplashImages: action.images,\r\n    error: null,\r\n    searchTimer: true,\r\n    spinnerTimer: false\r\n   }\r\n  case actionType.AJAX_FAIL:\r\n   return {\r\n    ...state,\r\n    error: action.error,\r\n    searchTimer: false,\r\n    spinnerTimer: false\r\n   }\r\n  case actionType.ERRORNULL:\r\n   return {\r\n    ...state,\r\n    error: null\r\n   }\r\n  default:\r\n   return state;\r\n }\r\n}\r\n\r\nexport default reducer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore , applyMiddleware ,compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport Reducer from './store/reducer/reducer';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst composeEnhancers= window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(Reducer ,composeEnhancers(applyMiddleware(thunk)));\r\n\r\nconst app = ( \r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n)\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}